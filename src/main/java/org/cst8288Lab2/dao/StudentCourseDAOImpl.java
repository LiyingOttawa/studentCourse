/**
 * File name: StudentCourseDAOImpl.java
 * Author: Liying Guo, 040858257
 * Course: CST8288 OOP with Design Patterns
 * Assignment: lab2
 * Date: 2024-02-27
 * Professor: Gustavo Adami
 * Purpose: Data Access Object for StudentCourse table
 */
package org.cst8288Lab2.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import org.cst8288Lab2.dto.StudentCourseDTO;


/**
 * This class is used for creating, retrieving, updating, and 
 deleting a specific StudentCourseDTO object generated by the Client class; 
 * @author Liying Guo
 * @version 1.0
 * @since 2024-March-03
 */
public class StudentCourseDAOImpl implements StudentCourseDAO{
        /**
         * query sql statement
         */
        private  final String SELECT_SQL_QUERY     = "SELECT studentId,courseId, term,year FROM StudentCourse WHERE studentId=? AND courseId=?";
        /**
         * insert sql statement
         */
        private  final String INSERT_SQL_QUERY     = "INSERT INTO StudentCourse(studentId,courseId,term,year) VALUES(?,?,?,?)";
        /**
         * delete sql statement
         */
        private  final String DELETE_ALL_SQL_QUERY = "DELETE FROM StudentCourse";
        /**
         * update sql statment
         */
        private  final String UPDATE_SQL_QUERY     = "UPDATE StudentCourse SET term=?,year=? WHERE studentId=? AND courseId=?";

        /***
         * insert studentcourse to table
         * @param studentCourse to insert
         * @throws SQLException 
         */
        @Override
	public  void createStudentCourse(StudentCourseDTO studentCourse) throws SQLException
        {
           Connection con = null;
           PreparedStatement ps = null;
           try
           {
              con = DataSource.getInstance().getConnection();
              if ( con == null )
              {
                 System.out.println( "Error getting the connection. Please check if the DB server is running" );
                 return;
              }

              con.setAutoCommit( false );
              ps = con.prepareStatement( INSERT_SQL_QUERY );
              ps.setInt(1, studentCourse.getStudentId() );
              ps.setString(2, studentCourse.getCourseId() );
              ps.setInt(3, studentCourse.getTerm() );
              ps.setInt(4, studentCourse.getYear());
              
              ps.execute();
              System.out.println( "insertStudentCourse => " + ps.toString() );
              con.commit();

           }
           catch ( SQLException e )
           {
              try
              {
                 if ( con != null )
                 {
                    con.rollback();
                 }
              }
              catch ( SQLException e1 )
              {
                 throw e1;
              }
              throw e;
           }
           finally
           {
              try
              {
                 if(ps!=null)ps.close();
                 DataSource.getInstance().closeConnection();
              }
              catch ( SQLException e )
              {
                 throw e;
              }
           }
        }
        
        /**
         * query studentCourse by studentId and courseId
         * @param studentId for query
         * @param courseId for query
         * @return
         * @throws SQLException 
         */
        @Override
        public  StudentCourseDTO retrieveStudentCourse(int studentId, String courseId) throws SQLException
        {
           Connection con = null;
           PreparedStatement ps = null;
           ResultSet rs = null;
           StudentCourseDTO studentCourse = null;
           try
           {
              con = DataSource.getInstance().getConnection();
              if ( con == null )
              {
                 System.out.println( "Error getting the connection. Please check if the DB server is running" );
                 return studentCourse;
              }
              ps = con.prepareStatement( SELECT_SQL_QUERY );
              ps.setInt(1, studentId );
              ps.setString(2, courseId );
              rs = ps.executeQuery();
              System.out.println( "retriveStudentCourse => " + ps.toString() );
              if ( rs.next() )
              {
                 studentCourse = new StudentCourseDTO(rs.getInt("studentId" ),rs.getString( "courseId" ),rs.getInt( "term" ),rs.getInt( "year" ));
              }

           }
           catch ( SQLException e )
           {
              throw e;

           }

           finally
           {
              try
              {
                  if(rs!=null)rs.close();
                  if(ps!=null)ps.close();
                  DataSource.getInstance().closeConnection();
              }
              catch ( SQLException e )
              {
                 throw e;
              }
           }
           return studentCourse;
        }
        
        /**
         * update table
         * @param studentCourse to update
         * @throws SQLException 
         */
        @Override
        public  void updateStudentCourse(StudentCourseDTO studentCourse) throws SQLException
        {
           Connection con = null;
           PreparedStatement ps = null;

           try
           {
              con = DataSource.getInstance().getConnection();
              if ( con == null )
              {
                 System.out.println( "Error getting the connection. Please check if the DB server is running" );
                 return;
              }
              con.setAutoCommit( false );
              ps = con.prepareStatement( UPDATE_SQL_QUERY );
              ps.setInt(1, studentCourse.getTerm() );
              ps.setInt(2, studentCourse.getYear() );
              ps.setInt(3, studentCourse.getStudentId() );
              ps.setString(4, studentCourse.getCourseId() );
              ps.execute();
              System.out.println( "updateStudentCourse => " + ps.toString() );
              con.commit();

           }
           catch ( SQLException e )
           {
              try
              {
                 if ( con != null )
                 {
                    con.rollback();
                    throw e;
                 }
              }
              catch ( SQLException e1 )
              {
                 throw e1;
              }
           }
           finally
           {
              try
              {
                 if(ps!=null)ps.close();
                  DataSource.getInstance().closeConnection();
              }
              catch ( SQLException e )
              {
                 throw e;
              }
           }

        }
        
        @Override
        public  void saveStudentCourse(StudentCourseDTO studentCourse) throws SQLException
        {
            StudentCourseDTO studentCourseDB = retrieveStudentCourse(studentCourse.getStudentId(), studentCourse.getCourseId());
            if(studentCourseDB == null)
            {
                createStudentCourse(studentCourse);
            }
            else
            {
                updateStudentCourse(studentCourse);
            }
        }
        
        public  void deleteAllRecords() throws SQLException
        {
           Connection con = null;
           PreparedStatement ps = null;
           try
           {
              con = DataSource.getInstance().getConnection();
              if ( con == null )
              {
                 System.out.println( "Error getting the connection. Please check if the DB server is running" );
                 return;
              }
              ps = con.prepareStatement( DELETE_ALL_SQL_QUERY );
              ps.execute();
              System.out.println( "deleteAllRecords => " + ps.toString() );
           }
           catch ( SQLException e )
           {
              throw e;

           }

           finally
           {
              try
              {
                  if(ps != null)ps.close();
                  DataSource.getInstance().closeConnection();
              }
              catch ( SQLException e )
              {
                 throw e;
              }
           }
        }
}
