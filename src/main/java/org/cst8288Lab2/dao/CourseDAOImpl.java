/**
 * File name: CourseDAOImpl.java
 * Author: Liying Guo, 040858257
 * Course: CST8288 OOP with Design Patterns
 * Assignment: lab2
 * Date: 2024-03-03
 * Professor: Gustavo Adami
 * Purpose: Data Access Object for course table
 */
package org.cst8288Lab2.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import org.cst8288Lab2.dto.CourseDTO;

/**
 * This class is used for creating, retrieving, updating, and 
 deleting a specific CourseDTO object generated by the Client class; 
 * @author Liying Guo
 * @version 1.0
 * @since 2024-March-03
 */
public class CourseDAOImpl implements CourseDAO {
        /**
         * query string
         */
        private static final String SELECT_SQL_QUERY     = "SELECT courseId,courseName FROM Course WHERE courseId=?";
        /**
         * insert sql statement
         */
        private static final String INSERT_SQL_QUERY     = "INSERT INTO Course(courseId,courseName) VALUES(?,?)";
        /**
         * update sql statement
         */
        private static final String UPDATE_SQL_QUERY     = "UPDATE Course SET courseName=? WHERE courseId=?";
        /**
         * delete sql statement
         */
        private static final String DELETE_ALL_SQL_QUERY = "DELETE FROM Course";
        
        /***
         * insert course to table
         * @param course to insert
         * @throws SQLException 
         */
        @Override
	public void createCourse(CourseDTO course) throws SQLException
        {
           Connection con = null;
           PreparedStatement ps = null;
           try
           {
              con = DataSource.getInstance().getConnection();
              if ( con == null )
              {
                 System.out.println( "Error getting the connection. Please check if the DB server is running" );
                 return;
              }

              con.setAutoCommit( false );
              ps = con.prepareStatement( INSERT_SQL_QUERY );
              ps.setString(1, course.getCourseId() );
              ps.setString(2, course.getCourseName() );

              ps.execute();
              System.out.println( "insertCourse => " + ps.toString() );
              con.commit();

           }
           catch ( SQLException e )
           {
              try
              {
                 if ( con != null )
                 {
                    con.rollback();
                 }
              }
              catch ( SQLException e1 )
              {
                 throw e1;
              }
              throw e;
           }
           finally
           {
              try
              {
                 if(ps!=null)ps.close();
                 DataSource.getInstance().closeConnection();
              }
              catch ( SQLException e )
              {
                 throw e;
              }
           }
        }
        
        /***
         * query course by id
         * @param courseId courseId used to query
         * @return
         * @throws SQLException 
         */
        @Override
        public CourseDTO retrieveCourse(String courseId) throws SQLException
        {
           Connection con = null;
           PreparedStatement ps = null;
           ResultSet rs = null;
           CourseDTO course = null;
           try
           {
              con = DataSource.getInstance().getConnection();
              if ( con == null )
              {
                 System.out.println( "Error getting the connection. Please check if the DB server is running" );
                 return course;
              }
              ps = con.prepareStatement( SELECT_SQL_QUERY );
              ps.setString(1, courseId );
              rs = ps.executeQuery();
              System.out.println( "retriveCourse => " + ps.toString() );
              if ( rs.next() )
              {
                 course = new CourseDTO(rs.getString("courseId" ),rs.getString( "courseName" ));
              }

           }
           catch ( SQLException e )
           {
              throw e;

           }

           finally
           {
              try
              {
                  if(rs!=null)rs.close();
                  if(ps!=null)ps.close();
                  DataSource.getInstance().closeConnection();
              }
              catch ( SQLException e )
              {
                 throw e;
              }
           }
           return course;
        }
        
        /***
         * update course in table
         * @param course to update
         * @throws SQLException 
         */
        @Override
        public void updateCourse(CourseDTO course) throws SQLException
        {
           Connection con = null;
           PreparedStatement ps = null;

           try
           {
              con = DataSource.getInstance().getConnection();
              if ( con == null )
              {
                 System.out.println( "Error getting the connection. Please check if the DB server is running" );
                 return;
              }
              con.setAutoCommit( false );
              ps = con.prepareStatement( UPDATE_SQL_QUERY );
              ps.setString(1, course.getCourseName() );
              ps.setString(2, course.getCourseId() );

              ps.execute();
              System.out.println( "updateCourse => " + ps.toString() );
              con.commit();

           }
           catch ( SQLException e )
           {
              try
              {
                 if ( con != null )
                 {
                    con.rollback();
                    throw e;
                 }
              }
              catch ( SQLException e1 )
              {
                 throw e1;
              }
           }
           finally
           {
              try
              {
                 if(ps!=null)ps.close();
                  DataSource.getInstance().closeConnection();
              }
              catch ( SQLException e )
              {
                 throw e;
              }
           }

        }
        
        @Override
        public void saveCourse(CourseDTO course) throws SQLException
        {
            CourseDTO courseDB = retrieveCourse(course.getCourseId());
            if(courseDB == null)
            {
                createCourse(course);
            }
            else
            {
                updateCourse(course);
            }
        }
        
        @Override
        public void deleteAllRecords() throws SQLException
        {
           Connection con = null;
           PreparedStatement ps = null;
           try
           {
              con = DataSource.getInstance().getConnection();
              if ( con == null )
              {
                 System.out.println( "Error getting the connection. Please check if the DB server is running" );
                 return;
              }
              ps = con.prepareStatement( DELETE_ALL_SQL_QUERY );
              ps.execute();
              System.out.println( "deleteAllRecords => " + ps.toString() );
           }
           catch ( SQLException e )
           {
              throw e;

           }

           finally
           {
              try
              {
                  if(ps != null)ps.close();
                  DataSource.getInstance().closeConnection();
              }
              catch ( SQLException e )
              {
                 throw e;
              }
           }
        }
}
